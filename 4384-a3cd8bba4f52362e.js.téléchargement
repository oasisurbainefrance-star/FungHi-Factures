"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4384],{9916:(G,d,c)=>{c.d(d,{U4:()=>g,q3:()=>l});var b=c(27062);let l=(0,c(7620).createContext)({enabled:!1,isActive:!1,orgUuid:""}),g=()=>(0,b.fS)("claudeai_tiny_pancakes").value},11653:(G,d,c)=>{c.d(d,{$s:()=>H,A:()=>S,E9:()=>z,Gg:()=>s,LD:()=>p,M2:()=>M,Uw:()=>Y,Vq:()=>y,XY:()=>h,a2:()=>x,nW:()=>i,nk:()=>o,vQ:()=>Q,vu:()=>F,w:()=>R,zH:()=>E});var b=c(77186),l=c(1761),g=c(39323),Z=c(40793),I=c(49642),V=c(64597),W=c(96386),X=c(67933),A=c(87606),B=c(73476);let h="STATIC_LIST_WORKFLOW",y="tiny-pancakes-state",m="tiny-pancakes-events",C=(G,d,c,g,V,W,A)=>{var B,h;let{activeOrganization:y}=(0,l.YL)(),m=null==y?void 0:y.uuid,C=(0,b.mn)(),Y=null==(B=null==A?void 0:A.enabled)||B,J=[G,m,d],R=async()=>{if(!m)throw Error("No organization UUID");if(!d)throw Error("Missing workflow ID");let b="/api/organizations/".concat(m,"/orchestration/").concat(d,"/").concat(c),l=await C(b,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify((0,Z.aB)(V,g(d)))});if(!l.ok){let d=await l.text();throw Error("Failed to fetch ".concat(G,": ").concat(d))}return(0,I.Rf)(W,await l.json())},{data:F,error:n,isLoading:u,refetch:a}=(0,X.useQuery)({queryKey:J,queryFn:R,enabled:!!m&&!!d&&Y,refetchInterval:null==A?void 0:A.refetchInterval,staleTime:null!=(h=null==A?void 0:A.staleTime)?h:3e5,refetchOnWindowFocus:!1});return{data:F,error:n,isLoading:u,refetch:a}},Y=()=>C("tiny-pancakes-list",h,"TinyPancakesGetList",()=>(0,V.v)(g.JA,{}),g.JA,g.PN,{refetchInterval:5e3}),J=(G,d,c,l)=>{let g=(0,b.L2)(G,"POST",{...l,transformVariables:G=>(0,Z.aB)(d,G)});return{...g,mutateAsync:async G=>{let d=await g.mutateAsync(G);return(0,I.Rf)(c,d)},mutate:G=>{g.mutate(G)}}},R=()=>{let{activeOrganization:G}=(0,l.YL)(),d=null==G?void 0:G.uuid;return J(G=>"/api/organizations/".concat(d,"/orchestration/").concat(G.id,"/TinyPancakesStart"),g.t6,g.pM)},F=G=>{let{activeOrganization:d}=(0,l.YL)(),c=null==d?void 0:d.uuid,b=i([{cacheKey:[m,c,G],deriveNext:n},{cacheKey:[y,c,G],deriveNext:u}]);return J(()=>"/api/organizations/".concat(c,"/orchestration/").concat(G,"/TinyPancakesSendMessage"),g.ij,g.Ml,b)};function n(G,d){var c;if(d)return{...d,events:[...null!=(c=d.events)?c:[],...G.messages.map(G=>{var d,c;return d="optimistic-".concat(Math.random()),c=G,(0,V.v)(g.Sr,{eventId:d,event:{case:"message",value:c},timestamp:(0,V.v)(W.w,{seconds:BigInt(Math.floor(Date.now()/1e3))})})})]}}function u(G,d){if(d)return{...d,status:g.v1.ACTIVE}}function a(G,d){var c,b,l,g,Z,I,V;if(d)return{...d,toolConfiguration:{...d.toolConfiguration,$typeName:"anthropic.orchestration.v1alpha.ToolConfiguration",capabilities:null!=(Z=null==(c=G.toolConfiguration)?void 0:c.capabilities)?Z:null==(b=d.toolConfiguration)?void 0:b.capabilities,selectedMcpTools:null!=(V=null!=(I=null==(l=G.toolConfiguration)?void 0:l.selectedMcpTools)?I:null==(g=d.toolConfiguration)?void 0:g.selectedMcpTools)?V:[]}}}let o=G=>C(m,G,"TinyPancakesGetEvents",G=>(0,V.v)(g.CB,{id:G}),g.CB,g.W8),S=function(G,d,c){let b=!(arguments.length>3)||void 0===arguments[3]||arguments[3];return C("tiny-pancakes-resource-".concat(c),d,"TinyPancakesGetResource",G=>(0,V.v)(g.Vg,{id:G,resourceUri:c}),g.Vg,g.FW,{enabled:b})},H=function(G){let d=!(arguments.length>1)||void 0===arguments[1]||arguments[1];return C(y,G,"TinyPancakesGetState",G=>(0,V.v)(g.OS,{id:G}),g.OS,g.mP,{enabled:d})},x=function(G){let d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{activeOrganization:c}=(0,l.YL)(),b=null==c?void 0:c.uuid;return J(()=>"/api/organizations/".concat(b,"/orchestration/").concat(G,"/TinyPancakesAnswer"),g.Ph,g.Hf,d)},s=(G,d,c,b,l)=>C("tiny-pancakes-log",G+(d||"")+(c||""),"TinyPancakesGetLog",()=>(0,V.v)(g.En,{id:G,planId:d,planItemId:c,includeAllEntries:b}),g.En,g.jp,{enabled:!l&&void 0!==d&&void 0!==c}),z=()=>{let{activeOrganization:G}=(0,l.YL)(),d=null==G?void 0:G.uuid;return J(G=>"/api/organizations/".concat(d,"/orchestration/").concat(G.id,"/TinyPancakesRename"),g.b9,g.hk)},M=G=>{let{activeOrganization:d}=(0,l.YL)(),c=null==d?void 0:d.uuid,b=i([{cacheKey:[y,c,G],deriveNext:a}]);return J(G=>"/api/organizations/".concat(c,"/orchestration/").concat(G.id,"/TinyPancakesSetToolConfiguration"),g.tn,g.N1,b)},Q=()=>{let{activeOrganization:G}=(0,l.YL)(),d=null==G?void 0:G.uuid;return J(G=>"/api/organizations/".concat(d,"/orchestration/").concat(G.id,"/TinyPancakesRevokeApproval"),g.Sy,g.QY)},E=()=>{let{activeOrganization:G}=(0,l.YL)(),d=null==G?void 0:G.uuid;return J(G=>"/api/organizations/".concat(d,"/orchestration/").concat(G.id,"/TinyPancakesDelete"),g.QO,g.mW)};function i(G){let d=(0,A.useQueryClient)();function c(G){return"prevState:".concat(String(G))}return{onMutate:async b=>(await Promise.all(G.map(async G=>{let{cacheKey:c}=G;await d.cancelQueries({queryKey:c})})),G.map(G=>{let{cacheKey:l,deriveNext:g}=G,Z=d.getQueryData(l);if(!Z)return{};let I=g(b,Z);return d.setQueryData(l,I),{[c(l)]:Z}}).reduce((G,d)=>({...G,...d}),{})),onError:(b,l,g)=>{G.forEach(G=>{let{cacheKey:b}=G;d.setQueryData(b,null==g?void 0:g[c(b)])})},onSettled:()=>Promise.all(G.map(G=>{let{cacheKey:c}=G;return d.invalidateQueries({queryKey:c})}))}}function p(G,d,c){let b=!(arguments.length>3)||void 0===arguments[3]||arguments[3],g=!(arguments.length>4)||void 0===arguments[4]||arguments[4],{activeOrganization:Z}=(0,l.YL)(),I=null==Z?void 0:Z.uuid;(0,B.G)("/api/organizations/".concat(I,"/workflows/").concat(G,"/subscribe"),d,c,b,g)}},39047:(G,d,c)=>{c.d(d,{cs:()=>h,l7:()=>B,jF:()=>A});var b=c(24478),l=c(27511);let g=(0,b.w)("CjBhbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhL3RleHQucHJvdG8SJWFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEiuwEKBFRleHQSPgoEdHlwZRgBIAEoDjIwLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuVGV4dC5UeXBlEgwKBHRleHQYAiABKAkSFQoNY29kZV9sYW5ndWFnZRgDIAEoCSJOCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIOCgpUWVBFX1BMQUlOEAESEQoNVFlQRV9NQVJLRE9XThACEg0KCVRZUEVfQ09ERRADQtcCCiljb20uYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYUIJVGV4dFByb3RvUAFaZmdpdGh1Yi5jb20vYW50aHJvcGljcy9hcHBzL3NlcnZpY2VzL2dlbi9wcm90by9hbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhO3N5bXBob255YXBwdjFhbHBoYaICBEFDU0GqAiVBbnRocm9waWMuQ2xhdWRlLlN5bXBob255LkFwcC5WMWFscGhhygIlQW50aHJvcGljXENsYXVkZVxTeW1waG9ueVxBcHBcVjFhbHBoYeICMUFudGhyb3BpY1xDbGF1ZGVcU3ltcGhvbnlcQXBwXFYxYWxwaGFcR1BCTWV0YWRhdGHqAilBbnRocm9waWM6OkNsYXVkZTo6U3ltcGhvbnk6OkFwcDo6VjFhbHBoYWIGcHJvdG8z"),Z=(0,b.w)("CjxhbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhL3Rvb2xfaW52b2NhdGlvbnMucHJvdG8SJWFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEiUwoLQnVpbHRpbkljb24SRAoEdHlwZRgBIAEoDjI2LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuQnVpbHRpbkljb25UeXBlIhkKClJlbW90ZUljb24SCwoDdXJsGAEgASgJIqQBCgRJY29uEkoKDGJ1aWx0aW5faWNvbhgBIAEoCzIyLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuQnVpbHRpbkljb25IABJICgtyZW1vdGVfaWNvbhgCIAEoCzIxLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuUmVtb3RlSWNvbkgAQgYKBGljb24iFwoVVG9vbEludm9jYXRpb25Db250ZW50ItACCg5Ub29sSW52b2NhdGlvbhJCCg1mYWxsYmFja190ZXh0GAEgASgLMisuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5UZXh0EhEKCXRvb2xfbmFtZRgCIAEoCRINCgV0aXRsZRgDIAEoCRIQCghzdWJ0aXRsZRgEIAEoCRI5CgRpY29uGAUgASgLMisuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5JY29uEk0KB2NvbnRlbnQYBiABKAsyPC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLlRvb2xJbnZvY2F0aW9uQ29udGVudBITCgtpc19jb21wbGV0ZRgIIAEoCBIQCghpc19lcnJvchgJIAEoCBIVCg1lcnJvcl9tZXNzYWdlGAogASgJKmwKD0J1aWx0aW5JY29uVHlwZRIhCh1CVUlMVElOX0lDT05fVFlQRV9VTlNQRUNJRklFRBAAEhoKFkJVSUxUSU5fSUNPTl9UWVBFX0ZJTEUQARIaChZCVUlMVElOX0lDT05fVFlQRV9FRElUEAJC4gIKKWNvbS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhQhRUb29sSW52b2NhdGlvbnNQcm90b1ABWmZnaXRodWIuY29tL2FudGhyb3BpY3MvYXBwcy9zZXJ2aWNlcy9nZW4vcHJvdG8vYW50aHJvcGljL2NsYXVkZS9zeW1waG9ueS9hcHAvdjFhbHBoYTtzeW1waG9ueWFwcHYxYWxwaGGiAgRBQ1NBqgIlQW50aHJvcGljLkNsYXVkZS5TeW1waG9ueS5BcHAuVjFhbHBoYcoCJUFudGhyb3BpY1xDbGF1ZGVcU3ltcGhvbnlcQXBwXFYxYWxwaGHiAjFBbnRocm9waWNcQ2xhdWRlXFN5bXBob255XEFwcFxWMWFscGhhXEdQQk1ldGFkYXRh6gIpQW50aHJvcGljOjpDbGF1ZGU6OlN5bXBob255OjpBcHA6OlYxYWxwaGFiBnByb3RvMw",[g]);var I=c(50798);let V=(0,b.w)("CjthbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhL2Rpc3BsYXlfY29udGVudC5wcm90bxIlYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYSJGChlSZXF1ZXN0SW50ZWdyYXRpb25Db250ZW50EhkKEWludGVncmF0aW9uX25hbWVzGAEgAygJEg4KBnJlYXNvbhgCIAEoCSJyChNCdXR0b25BY3Rpb25Db250ZW50Eg0KBXRpdGxlGAEgASgJEkIKCG9wZW5fdXJsGAIgASgLMi4uYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5PcGVuVXJsSABCCAoGYWN0aW9uIhYKB09wZW5VcmwSCwoDdXJsGAEgASgJIvYDCg5EaXNwbGF5Q29udGVudBJCCg1mYWxsYmFja190ZXh0GAEgASgLMisuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5UZXh0EjsKBHRleHQYAiABKAsyKy5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLlRleHRIABJQCg90b29sX2ludm9jYXRpb24YAyABKAsyNS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLlRvb2xJbnZvY2F0aW9uSAASUAoLZWxpY2l0YXRpb24YBCABKAsyOS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLkVsaWNpdGF0aW9uQ29udGVudEgAElMKDWJ1dHRvbl9hY3Rpb24YBSABKAsyOi5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLkJ1dHRvbkFjdGlvbkNvbnRlbnRIABJfChNyZXF1ZXN0X2ludGVncmF0aW9uGAYgASgLMkAuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5SZXF1ZXN0SW50ZWdyYXRpb25Db250ZW50SABCCQoHY29udGVudCJqChJFbGljaXRhdGlvbkNvbnRlbnQSVAoOZWxpY2l0YXRpb25faWQYASABKAsyPC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuRWxpY2l0YXRpb25JZELhAgopY29tLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGFCE0Rpc3BsYXlDb250ZW50UHJvdG9QAVpmZ2l0aHViLmNvbS9hbnRocm9waWNzL2FwcHMvc2VydmljZXMvZ2VuL3Byb3RvL2FudGhyb3BpYy9jbGF1ZGUvc3ltcGhvbnkvYXBwL3YxYWxwaGE7c3ltcGhvbnlhcHB2MWFscGhhogIEQUNTQaoCJUFudGhyb3BpYy5DbGF1ZGUuU3ltcGhvbnkuQXBwLlYxYWxwaGHKAiVBbnRocm9waWNcQ2xhdWRlXFN5bXBob255XEFwcFxWMWFscGhh4gIxQW50aHJvcGljXENsYXVkZVxTeW1waG9ueVxBcHBcVjFhbHBoYVxHUEJNZXRhZGF0YeoCKUFudGhyb3BpYzo6Q2xhdWRlOjpTeW1waG9ueTo6QXBwOjpWMWFscGhhYgZwcm90bzM",[g,Z,I.TZ]);var W=c(70012),X=c(96386);let A=(0,b.w)("CjRhbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhL3RpbWVsaW5lLnByb3RvEiVhbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhIoYDCghXb3JrZmxvdxJFCgJpZBgBIAEoCzI5LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5Xb3JrZmxvd0lkEg0KBXRpdGxlGAIgASgJEkYKBnN0YXR1cxgDIAEoDjI2LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuV29ya2Zsb3cuU3RhdHVzEi4KCmNyZWF0ZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnVwZGF0ZWRfYXQYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wInwKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABISCg5TVEFUVVNfUEVORElORxABEhIKDlNUQVRVU19SVU5OSU5HEAISHAoYU1RBVFVTX1dBSVRJTkdfRk9SX0lOUFVUEAMSFAoQU1RBVFVTX0NPTVBMRVRFRBAEItAECgNKb2ISQAoCaWQYASABKAsyNC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuSm9iSWQSTgoLd29ya2Zsb3dfaWQYAiABKAsyOS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuV29ya2Zsb3dJZBIOCgZwcm9tcHQYBCABKAkSQQoGc3RhdHVzGAUgASgOMjEuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5Kb2IuU3RhdHVzElAKDXBhcmVudF9qb2JfaWQYBiABKAsyNC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuSm9iSWRIAIgBARJdChRwYXJlbnRfYWN0b3JfdHVybl9pZBgHIAEoCzI6LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5BY3RvclR1cm5JZEgBiAEBIocBCgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASEgoOU1RBVFVTX1BFTkRJTkcQARISCg5TVEFUVVNfUlVOTklORxACEhQKEFNUQVRVU19DT01QTEVURUQQBBIRCg1TVEFUVVNfRkFJTEVEEAUSFAoQU1RBVFVTX0NBTkNFTExFRBAGQhAKDl9wYXJlbnRfam9iX2lkQhcKFV9wYXJlbnRfYWN0b3JfdHVybl9pZCKwAQoFQWN0b3ISPwoEdHlwZRgBIAEoDjIxLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuQWN0b3IuVHlwZRIUCgxkaXNwbGF5X25hbWUYAiABKAkiUAoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDgoKVFlQRV9IVU1BThABEhEKDVRZUEVfU1lNUEhPTlkQAhIPCgtUWVBFX0NMQVVERRADIqgDCglBY3RvclR1cm4SRgoCaWQYASABKAsyOi5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuQWN0b3JUdXJuSWQSTAoJcGFyZW50X2lkGAIgASgLMjkuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5pZGVudGlmaWVycy52MWFscGhhLldvcmtmbG93SWQSDwoHb3JkaW5hbBgDIAEoAxI7CgVhY3RvchgEIAEoCzIsLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuQWN0b3ISEwoLaXNfY29tcGxldGUYBSABKAgSSQoGam9iX2lkGAYgASgLMjQuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5pZGVudGlmaWVycy52MWFscGhhLkpvYklkSACIAQESOAoPbWVzc2FnZV9zZW50X2F0GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgBiAEBQgkKB19qb2JfaWRCEgoQX21lc3NhZ2Vfc2VudF9hdCLhAQoRQ29udGVudEJsb2NrR3JvdXASTgoCaWQYASABKAsyQi5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuQ29udGVudEJsb2NrR3JvdXBJZBISCgVsYWJlbBgCIAEoCUgAiAEBEk0KCXBhcmVudF9pZBgDIAEoCzI6LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5BY3RvclR1cm5JZBIPCgdvcmRpbmFsGAQgASgDQggKBl9sYWJlbCKeAgoMQ29udGVudEJsb2NrEkkKAmlkGAEgASgLMj0uYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5pZGVudGlmaWVycy52MWFscGhhLkNvbnRlbnRCbG9ja0lkElUKCXBhcmVudF9pZBgCIAEoCzJCLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5Db250ZW50QmxvY2tHcm91cElkEg8KB29yZGluYWwYAyABKAMSRgoHY29udGVudBgEIAEoCzI1LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuRGlzcGxheUNvbnRlbnQSEwoLaXNfY29tcGxldGUYBiABKAgi0wIKC0VsaWNpdGF0aW9uEkgKAmlkGAEgASgLMjwuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5pZGVudGlmaWVycy52MWFscGhhLkVsaWNpdGF0aW9uSWQSTgoLd29ya2Zsb3dfaWQYAiABKAsyOS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGEuV29ya2Zsb3dJZBJKCgdyZXF1ZXN0GAMgASgLMjkuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5FbGljaXRhdGlvblJlcXVlc3QSUQoIcmVzcG9uc2UYBCABKAsyOi5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLkVsaWNpdGF0aW9uUmVzcG9uc2VIAIgBAUILCglfcmVzcG9uc2Ui8AMKDldvcmtmbG93VXBkYXRlEhkKEXJlcGxhY2VfYWxsX3N0YXRlGAEgASgIEkYKCHdvcmtmbG93GAIgASgLMi8uYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5Xb3JrZmxvd0gAiAEBEkUKC2FjdG9yX3R1cm5zGAMgAygLMjAuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5BY3RvclR1cm4SVgoUY29udGVudF9ibG9ja19ncm91cHMYBCADKAsyOC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLkNvbnRlbnRCbG9ja0dyb3VwEksKDmNvbnRlbnRfYmxvY2tzGAUgAygLMjMuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5Db250ZW50QmxvY2sSOAoEam9icxgGIAMoCzIqLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuSm9iEkgKDGVsaWNpdGF0aW9ucxgHIAMoCzIyLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuRWxpY2l0YXRpb25CCwoJX3dvcmtmbG93IrQDChJFbGljaXRhdGlvblJlcXVlc3QSUAoGc3RhdHVzGAEgASgOMkAuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5FbGljaXRhdGlvblJlcXVlc3QuU3RhdHVzEg0KBXRpdGxlGAIgASgJEkoKC2Rlc2NyaXB0aW9uGAMgASgLMjUuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5EaXNwbGF5Q29udGVudBJACgZmaWVsZHMYBCADKAsyMC5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhLkZvcm1GaWVsZBJNCg5jdXJyZW50X3ZhbHVlcxgFIAMoCzI1LmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGEuRm9ybUZpZWxkVmFsdWUiYAoGU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAAEhIKDlNUQVRVU19QRU5ESU5HEAESFAoQU1RBVFVTX0NPTVBMRVRFRBACEhQKEFNUQVRVU19DQU5DRUxMRUQQA0LbAgopY29tLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGFCDVRpbWVsaW5lUHJvdG9QAVpmZ2l0aHViLmNvbS9hbnRocm9waWNzL2FwcHMvc2VydmljZXMvZ2VuL3Byb3RvL2FudGhyb3BpYy9jbGF1ZGUvc3ltcGhvbnkvYXBwL3YxYWxwaGE7c3ltcGhvbnlhcHB2MWFscGhhogIEQUNTQaoCJUFudGhyb3BpYy5DbGF1ZGUuU3ltcGhvbnkuQXBwLlYxYWxwaGHKAiVBbnRocm9waWNcQ2xhdWRlXFN5bXBob255XEFwcFxWMWFscGhh4gIxQW50aHJvcGljXENsYXVkZVxTeW1waG9ueVxBcHBcVjFhbHBoYVxHUEJNZXRhZGF0YeoCKUFudGhyb3BpYzo6Q2xhdWRlOjpTeW1waG9ueTo6QXBwOjpWMWFscGhhYgZwcm90bzM",[V,W.jm,I.TZ,X.i]);var B=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.PENDING=1]="PENDING",G[G.RUNNING=2]="RUNNING",G[G.WAITING_FOR_INPUT=3]="WAITING_FOR_INPUT",G[G.COMPLETED=4]="COMPLETED",G}({});let h=(0,l.Z)(A,7)},39323:(G,d,c)=>{c.d(d,{Iq:()=>h,$I:()=>m,Xu:()=>f,WK:()=>C,S3:()=>j,j$:()=>e,RB:()=>Y,nE:()=>r,xG:()=>A,yu:()=>y,Ph:()=>S,Hf:()=>x,QO:()=>v,mW:()=>k,Sr:()=>o,CB:()=>u,W8:()=>a,JA:()=>M,PN:()=>Q,En:()=>E,jp:()=>i,Vg:()=>t,FW:()=>D,OS:()=>s,mP:()=>z,b9:()=>p,hk:()=>K,Sy:()=>L,QY:()=>w,ij:()=>F,Ml:()=>n,tn:()=>N,N1:()=>U,t6:()=>J,pM:()=>R,v1:()=>O,mE:()=>H,_k:()=>P,VW:()=>T,Yj:()=>B});var b=c(24478),l=c(27511),g=c(62646),Z=c(62624),I=c(96386);let V=(0,b.w)("",[g.PX,Z.U,I.i]);var W=c(61623);let X=(0,b.w)("",[V,W.dA,I.i]),A=(0,l.Z)(X,1),B=(0,l.Z)(X,2),h=(0,l.Z)(X,3),y=(0,l.Z)(X,9),m=(0,l.Z)(X,16),C=(0,l.Z)(X,17),Y=(0,l.Z)(X,39),J=(0,l.Z)(X,47),R=(0,l.Z)(X,48),F=(0,l.Z)(X,49),n=(0,l.Z)(X,50),u=(0,l.Z)(X,51),a=(0,l.Z)(X,52),o=(0,l.Z)(X,53),S=(0,l.Z)(X,57),H=(0,l.Z)(X,66),x=(0,l.Z)(X,67),s=(0,l.Z)(X,68),z=(0,l.Z)(X,69),M=(0,l.Z)(X,72),Q=(0,l.Z)(X,73),E=(0,l.Z)(X,75),i=(0,l.Z)(X,76),p=(0,l.Z)(X,77),K=(0,l.Z)(X,78),N=(0,l.Z)(X,81),U=(0,l.Z)(X,82),L=(0,l.Z)(X,85),w=(0,l.Z)(X,86),v=(0,l.Z)(X,89),k=(0,l.Z)(X,90),t=(0,l.Z)(X,91),D=(0,l.Z)(X,92);var j=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.MODEL=1]="MODEL",G[G.ENVIRONMENT=2]="ENVIRONMENT",G}({}),e=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.ACTIVE=1]="ACTIVE",G[G.SETTLED=2]="SETTLED",G}({}),f=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.SUCCESS=1]="SUCCESS",G[G.TOOL_NOT_REGISTERED=2]="TOOL_NOT_REGISTERED",G[G.TOOL_UNREGISTERED=3]="TOOL_UNREGISTERED",G[G.TOOL_TIMEOUT=4]="TOOL_TIMEOUT",G[G.TOOL_STALL=5]="TOOL_STALL",G[G.TOOL_EXECUTION_ERROR=6]="TOOL_EXECUTION_ERROR",G[G.INVALID_TOOL_INPUT=7]="INVALID_TOOL_INPUT",G[G.TOOL_CANCELLED=8]="TOOL_CANCELLED",G[G.UNEXPECTED_ERROR=9]="UNEXPECTED_ERROR",G}({}),T=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.APPROVED=1]="APPROVED",G[G.DECLINED_BY_USER=2]="DECLINED_BY_USER",G[G.DECLINED_BY_SYSTEM=3]="DECLINED_BY_SYSTEM",G}({}),P=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.ONCE=1]="ONCE",G[G.ALL=2]="ALL",G}({}),r=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.PENDING=1]="PENDING",G[G.IN_PROGRESS=2]="IN_PROGRESS",G[G.COMPLETED=3]="COMPLETED",G[G.FAILED=4]="FAILED",G}({}),O=function(G){return G[G.UNSPECIFIED=0]="UNSPECIFIED",G[G.ACTIVE=1]="ACTIVE",G[G.IDLE=2]="IDLE",G[G.ERROR=3]="ERROR",G[G.COMPLETED=4]="COMPLETED",G}({})},50798:(G,d,c)=>{c.d(d,{TZ:()=>b});let b=(0,c(24478).w)("Cj9hbnRocm9waWMvY2xhdWRlL3N5bXBob255L2lkZW50aWZpZXJzL3YxYWxwaGEvaWRlbnRpZmllcnMucHJvdG8SLWFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYSIbCgpXb3JrZmxvd0lkEg0KBXZhbHVlGAEgASgJIhYKBUpvYklkEg0KBXZhbHVlGAEgASgJIhwKC0FjdG9yVHVybklkEg0KBXZhbHVlGAEgASgJIiQKE0NvbnRlbnRCbG9ja0dyb3VwSWQSDQoFdmFsdWUYASABKAkiHwoOQ29udGVudEJsb2NrSWQSDQoFdmFsdWUYASABKAkiHgoNRWxpY2l0YXRpb25JZBINCgV2YWx1ZRgBIAEoCSIYCgdBZ2VudElkEg0KBXZhbHVlGAEgASgJIuwBChZFeGVjdXRpb25FbnZpcm9ubWVudElkEl0KBmdpdGh1YhgBIAEoCzJLLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5HaXRodWJFeGVjdXRpb25FbnZpcm9ubWVudElkSAASXwoHc2Vzc2lvbhgCIAEoCzJMLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuaWRlbnRpZmllcnMudjFhbHBoYS5TZXNzaW9uRXhlY3V0aW9uRW52aXJvbm1lbnRJZEgAQhIKEGVudmlyb25tZW50X3R5cGUiOwocR2l0aHViRXhlY3V0aW9uRW52aXJvbm1lbnRJZBINCgVvd25lchgBIAEoCRIMCgRyZXBvGAIgASgJIlcKHVNlc3Npb25FeGVjdXRpb25FbnZpcm9ubWVudElkEhIKCnNlc3Npb25faWQYASABKAkSEAoIaG9zdG5hbWUYAiABKAkSEAoIdXNlcm5hbWUYAyABKAlClgMKMWNvbS5hbnRocm9waWMuY2xhdWRlLnN5bXBob255LmlkZW50aWZpZXJzLnYxYWxwaGFCEElkZW50aWZpZXJzUHJvdG9QAVp2Z2l0aHViLmNvbS9hbnRocm9waWNzL2FwcHMvc2VydmljZXMvZ2VuL3Byb3RvL2FudGhyb3BpYy9jbGF1ZGUvc3ltcGhvbnkvaWRlbnRpZmllcnMvdjFhbHBoYTtzeW1waG9ueWlkZW50aWZpZXJzdjFhbHBoYaICBEFDU0mqAi1BbnRocm9waWMuQ2xhdWRlLlN5bXBob255LklkZW50aWZpZXJzLlYxYWxwaGHKAi1BbnRocm9waWNcQ2xhdWRlXFN5bXBob255XElkZW50aWZpZXJzXFYxYWxwaGHiAjlBbnRocm9waWNcQ2xhdWRlXFN5bXBob255XElkZW50aWZpZXJzXFYxYWxwaGFcR1BCTWV0YWRhdGHqAjFBbnRocm9waWM6OkNsYXVkZTo6U3ltcGhvbnk6OklkZW50aWZpZXJzOjpWMWFscGhhYgZwcm90bzM")},70012:(G,d,c)=>{c.d(d,{jm:()=>b});let b=(0,c(24478).w)("CjdhbnRocm9waWMvY2xhdWRlL3N5bXBob255L2FwcC92MWFscGhhL2VsaWNpdGF0aW9uLnByb3RvEiVhbnRocm9waWMuY2xhdWRlLnN5bXBob255LmFwcC52MWFscGhhIpYBCglGb3JtRmllbGQSDAoEbmFtZRgBIAEoCRJCCgR0eXBlGAIgASgOMjQuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5Gb3JtRmllbGRUeXBlEg0KBWxhYmVsGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJEhMKC3BsYWNlaG9sZGVyGAcgASgJInYKDkZvcm1GaWVsZFZhbHVlEhIKCmZpZWxkX25hbWUYASABKAkSFgoMc3RyaW5nX3ZhbHVlGAIgASgJSAASFgoMbnVtYmVyX3ZhbHVlGAMgASgDSAASFwoNYm9vbGVhbl92YWx1ZRgEIAEoCEgAQgcKBXZhbHVlIlwKE0VsaWNpdGF0aW9uUmVzcG9uc2USRQoGdmFsdWVzGAEgAygLMjUuYW50aHJvcGljLmNsYXVkZS5zeW1waG9ueS5hcHAudjFhbHBoYS5Gb3JtRmllbGRWYWx1ZSpMCg1Gb3JtRmllbGRUeXBlEh8KG0ZPUk1fRklFTERfVFlQRV9VTlNQRUNJRklFRBAAEhoKFkZPUk1fRklFTERfVFlQRV9TRUxFQ1QQAULeAgopY29tLmFudGhyb3BpYy5jbGF1ZGUuc3ltcGhvbnkuYXBwLnYxYWxwaGFCEEVsaWNpdGF0aW9uUHJvdG9QAVpmZ2l0aHViLmNvbS9hbnRocm9waWNzL2FwcHMvc2VydmljZXMvZ2VuL3Byb3RvL2FudGhyb3BpYy9jbGF1ZGUvc3ltcGhvbnkvYXBwL3YxYWxwaGE7c3ltcGhvbnlhcHB2MWFscGhhogIEQUNTQaoCJUFudGhyb3BpYy5DbGF1ZGUuU3ltcGhvbnkuQXBwLlYxYWxwaGHKAiVBbnRocm9waWNcQ2xhdWRlXFN5bXBob255XEFwcFxWMWFscGhh4gIxQW50aHJvcGljXENsYXVkZVxTeW1waG9ueVxBcHBcVjFhbHBoYVxHUEJNZXRhZGF0YeoCKUFudGhyb3BpYzo6Q2xhdWRlOjpTeW1waG9ueTo6QXBwOjpWMWFscGhhYgZwcm90bzM")},73476:(G,d,c)=>{c.d(d,{G:()=>Z});var b=c(39047),l=c(49642),g=c(7620);function Z(G,d,c){let Z=!(arguments.length>3)||void 0===arguments[3]||arguments[3],I=!(arguments.length>4)||void 0===arguments[4]||arguments[4],V=(0,g.useRef)(null),W=(0,g.useCallback)(()=>{if(I){if(V.current)try{V.current.close()}catch(G){}V.current=new EventSource(G,{withCredentials:!0}),V.current.onmessage=G=>{let c=JSON.parse(G.data);d((0,l.Rf)(b.cs,c))},V.current.onerror=()=>{Z&&setTimeout(W,1e3)},c()}},[G,d,c,Z,I]);(0,g.useEffect)(()=>(W(),()=>{var G;null==(G=V.current)||G.close()}),[V,W])}}}]);